local common_vars = require("common")
local game_info = require("game/game_info")

go.property("speed",3)
--go.property("max_bullets_on_screen",1)

function fire_bullet(self)
	if self.bullets_on_screen<game_info.player_max_bullets then
		game_info.shots_fired = game_info.shots_fired+1
		self.bullets_on_screen = self.bullets_on_screen + 1
		local bullet_pos=go.get_position()
		bullet_pos.y = bullet_pos.y + 5
		bullet_pos.x = bullet_pos.x + 2
		local bullet=factory.create("#bulletFactory",bullet_pos)
		table.insert(self.bullets, bullet)
		msg.post(bullet, "subscribe",{parent_url=msg.url()})
		msg.post("bullet_display", "update",{max_bullets=game_info.player_max_bullets,fired_bullets=self.bullets_on_screen})
	end
end	

function go_left(self) 
	local pos=go.get_position()
	if pos.x>16 then
		pos.x = pos.x - self.speed
		go.set_position(pos)
	end
end

function go_right(self)
	local pos=go.get_position()
	if pos.x<common_vars.screen_width-18 then
		pos.x = pos.x + self.speed
		go.set_position(pos)	
	end
end

function init(self)
	local pos=go.get_position()
	pos.y=-20
	pos.x=common_vars.screen_width/2
	go.set_position(pos)
	self.speed=3
	self.bullets_on_screen=0
	self.bullets={}
	--self.max_bullets_on_screen=1
	msg.post(".", "acquire_input_focus")
	print("player url: "..msg.url())
	msg.post("/manager", "player_subscribe")
	msg.post("bullet_display", "update",{max_bullets=game_info.player_max_bullets,fired_bullets=self.bullets_on_screen})
	--timer.delay(1, true, function()
	--	factory.create("#factory") 
	--end)	
	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, 116, go.EASING_LINEAR, 1,0,function ()
		-- ready to play
	end)
end

function final(self)
	msg.post(".", "release_input_focus")
end

function on_input(self, action_id, action)
	-- if action_id==hash("escape") and action.released then
	-- 	msg.post("/manager#manager", "pause")
	-- end
	if game_info.mode ~= "play" then return end
	local pos=go.get_position()
	if action_id==hash("left") and pos.x>16 then
		go_left(self)
	elseif action_id==hash("right") and pos.x<common_vars.screen_width-18 then
		go_right(self)
	--elseif (action_id==hash("fire") or (action_id==hash("touch") and action.y<200) ) and action.pressed and self.bullets_on_screen<self.max_bullets_on_screen then			
	elseif (action_id==hash("fire") ) and action.pressed then			
		--msg.post("/manager#manager", "bullet_fired")
		fire_bullet(self)
	elseif action_id==hash("increase_max_bullets") then
		print("message increase max bullets")
		if game_info.player_max_bullets < 4 then 
			game_info.player_max_bullets = game_info.player_max_bullets+1
			msg.post("bullet_display", "update",{max_bullets=game_info.player_max_bullets,fired_bullets=self.bullets_on_screen})	
		end
	end
end

function on_message(self, message_id, message, sender)	
	if message_id==hash("bullet_destroyed") then
		print("bullet destroyed")
		self.bullets_on_screen = self.bullets_on_screen - 1
		for i,v in ipairs(self.bullets) do
			if v == sender.path then
				table.remove(self.bullets,i)
			end
		end
		msg.post("bullet_display", "update",{max_bullets=game_info.player_max_bullets,fired_bullets=self.bullets_on_screen})
	end
	if message_id==hash("go_left") then
		go_left(self)
	end
	if message_id==hash("go_right") then
		go_right(self)
	end
	if message_id==hash("fire") then
		fire_bullet(self)
	end
	
	if message_id==hash("trigger_response") and message.enter then
		--if object is bullet
		--msg.post("#collisionobject", "disable")
		if message.other_group==hash("enemy") then
			--game over?
			game_info.lives=0
			particlefx.play("#explosion_big")
			local trg_x=common_vars.screen_width+128
			if math.random(6)>3 then 
				trg=-128
			end
			go.animate(".", "scale.x", go.PLAYBACK_ONCE_FORWARD, 4, go.EASING_LINEAR, 0.8,0)
			go.animate(".", "scale.y", go.PLAYBACK_ONCE_FORWARD, 4, go.EASING_LINEAR, 0.8,0)
			go.animate(".", "rotation.z", go.PLAYBACK_ONCE_FORWARD, 0.8, go.EASING_LINEAR, 0.8,0)
			go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, 100, go.EASING_LINEAR, 0.8,0)
			go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, trg_x, go.EASING_LINEAR, 0.8,0,function ()
				msg.post("/manager", "game_over")
			end)
		end
		if message.other_group==hash("enemy_bullet") then
			print("player hit")
			particlefx.play("#explosion_big")
			go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, -116, go.EASING_LINEAR, 0.3,0,function ()
				if game_info.lives > 0 then 
					go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, 116, go.EASING_LINEAR, 0.7,0,function ()
						msg.post("/manager", "player_ready")
					end)
				end
			end)			
			msg.post("/manager", "player_hit")
		end
		
		if message.other_group==hash("bonus") then
			--go.set( msg.url(msg.url().socket,enemy,"enemy"), "speed", levels[self.level].horizontal_speed)
			if go.get(msg.url(msg.url().socket,message.other_id,"bonus"), "bonus_type")==hash("missile") then
				print "got missile"				
				go.animate("#sprite", "tint", go.PLAYBACK_ONCE_PINGPONG, vmath.vector4(0.2, 0.2, 0.2, 0.2), go.EASING_INOUTSINE, 0.5)
				if game_info.player_max_bullets < 5 then 
					game_info.player_max_bullets = game_info.player_max_bullets+1
					--msg.post("/manager","player_bullets_changed")
					msg.post("bullet_display", "update",{max_bullets=game_info.player_max_bullets,fired_bullets=self.bullets_on_screen})
				end				
			end	
		end		
	end
	if message_id == hash("remove_bullets") then
		for k,v in pairs(self.bullets) do
			go.delete(v)
		end
		self.bullets_on_screen=0
		msg.post("bullet_display", "update",{max_bullets=game_info.player_max_bullets,fired_bullets=self.bullets_on_screen})
	end
	
end
