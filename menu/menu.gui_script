local common_vars=require("common")
local high_score=require("highscore")
local settings = require("settings")

function text_from_bool(v)
	if v then 
		return "on"
	else
		return "off"
	end
end

function text_from_num(v)
	if v == 0.5 then
		return "mid"
	elseif v== 1 then 
		return "hi"
	else
		return "low"
	end
end

function show_settings(self)
	gui.animate(gui.get_node("panel_settings"), "position.y", 320, gui.EASING_INCIRC, 0.5,0,function()
		self.show_settings=true
	end)
end

function hide_settings(self)
	gui.animate(gui.get_node("panel_settings"), "position.y", -140, gui.EASING_INCIRC, 0.5,0,function()
		self.show_settings=false
	end)
end


function init(self)
	msg.post(".", "acquire_input_focus")
	settings.load()	
	gui.set_text(gui.get_node("text_version"), "v"..sys.get_config("project.version"))
	gui.set_text(gui.get_node("text_by"), "by "..sys.get_config("project.developer"))
	gui.set_text(gui.get_node("text_sound_value"), text_from_bool(settings.sound))
	gui.set_text(gui.get_node("text_scanlines_value"), text_from_bool(settings.scanlines))
	gui.set_text(gui.get_node("text_volume_value"), text_from_num(settings.volume))
	gui.set_visible(gui.get_node("scanlines"), settings.scanlines)
	self.show_settings=false
	gui.set_scale(gui.get_node("title"), vmath.vector3(0.1,0.1,1))
	local info=sys.get_sys_info()
	gui.set_text(gui.get_node("info"), "Platform: "..common_vars.device_type)
	local hi=high_score.load()
	gui.set_text (gui.get_node("txt_high"), string.format(" High score: %05d", hi))
	if common_vars.is_mobile then
		gui.set_enabled(gui.get_node("text_play"), false)
		gui.set_enabled(gui.get_node("btn_play"), true)
	else
		gui.set_enabled(gui.get_node("text_play"), true)
		gui.set_enabled(gui.get_node("btn_play"), false)	
	end
	gui.animate(gui.get_node("title"), "scale.x", 1, gui.EASING_IN, 0.7, 0)
	gui.animate(gui.get_node("title"), "scale.y", 1, gui.EASING_IN, 0.7, 0)
	
	--gui.set_position(gui.get_node("title"),vmath.vector3(common_vars.screen_width/2,common_vars.screen_height-40,0))
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == hash("escape") and action.released then
		msg.post("/sound_manager", "play_sample",{sample="button"})
		if self.show_settings then			
			hide_settings(self)
			--gui.set_enabled(gui.get_node("panel_settings"), false)
		else
			msg.post("@system:", "exit", {code = 0})
		end
		
	end
	if not common_vars.is_mobile and action_id == hash("fire") and action.released and not self.show_settings then
		msg.post("/sound_manager", "play_sample",{sample="button"})
		msg.post("startup:/handler#startup", "show_game")
	end

	if action_id == hash("touch") then
		if action.released then
			gui.set_scale(gui.get_node("btn_settings"), vmath.vector4(1, 1, 1, 0))
			gui.set_scale(gui.get_node("btn_play"), vmath.vector4(1, 1, 1, 0))
		end
		if common_vars.is_mobile and gui.pick_node(gui.get_node("btn_play"), action.x, action.y) then
			if action.pressed then
				msg.post("/sound_manager", "play_sample",{sample="button"})
				gui.set_scale(gui.get_node("btn_play"), vmath.vector4(1.2, 1.2, 1, 0))
			end
			if action.released then 
				msg.post("startup:/handler#startup", "show_game")
			end
		end
		
		if gui.pick_node(gui.get_node("btn_settings"), action.x, action.y) then
			if action.pressed then
				msg.post("/sound_manager", "play_sample",{sample="button"})
				gui.set_scale(gui.get_node("btn_settings"), vmath.vector4(1.2, 1.2, 1, 0))
			end			
			if action.released then
				if self.show_settings then
					hide_settings(self)
					--self.show_settings=false
					--gui.set_enabled(gui.get_node("panel_settings"), false)
				else
					show_settings(self)
					--self.show_settings=true
					--gui.set_enabled(gui.get_node("panel_settings"), true)					
				end
			end	
		elseif not gui.pick_node(gui.get_node("panel_settings"), action.x, action.y) and self.show_settings and action.released then
			hide_settings(self)
			--self.show_settings=false
			--gui.set_enabled(gui.get_node("panel_settings"), false)
		end
		if self.show_settings then
			if gui.pick_node(gui.get_node("btn_sound"), action.x, action.y) and action.released then
				msg.post("/sound_manager", "play_sample",{sample="button"})
				settings.sound = not settings.sound
				settings.save()
				gui.set_text(gui.get_node("text_sound_value"), text_from_bool(settings.sound))								
			end
			if gui.pick_node(gui.get_node("btn_scanlines"), action.x, action.y) and action.released then
				msg.post("/sound_manager", "play_sample",{sample="button"})
				settings.scanlines = not settings.scanlines
				settings.save()
				gui.set_text(gui.get_node("text_scanlines_value"), text_from_bool(settings.scanlines))
				gui.set_visible(gui.get_node("scanlines"), settings.scanlines)
			end	
			if gui.pick_node(gui.get_node("btn_volume"), action.x, action.y) and action.released then
				msg.post("/sound_manager", "play_sample",{sample="button"})
				if settings.volume == 0.1 then
					settings.volume = 0.5 
				elseif settings.volume == 0.5 then
					settings.volume = 1 
				else settings.volume=0.1
				end
				settings.save()
				gui.set_text(gui.get_node("text_volume_value"), text_from_num(settings.volume))
			end				
		end
		
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
